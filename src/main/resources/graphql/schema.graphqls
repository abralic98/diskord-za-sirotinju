type Query {
  meQuery: User
  getAllUsers: [User]
  getUserById(id: ID!): User
  getAllServers: [Server]
  getRoomsByServerId(id: ID!): [Room]
  # getMessagesByRoomId(id: ID!): [Message]
  getMessagesByRoomId(id: ID!, page: Int!, size: Int!): MessagePage!
  getRoomById(id: ID!): Room
  getUsersByServerId(id: ID!): [User]
}

type Mutation {
  createUser(user: CreateUserInput): User
  deactivateUser(id: ID): User
  createSession(credentials: CreateSessionInput): UserWithToken
  createServer(server: CreateServerInput): Server
  createRoom(room: CreateRoomInput): Room
  createMessage(message: CreateMessageInput): Message
}

# USERS ##############################

type User {
  id: ID
  username: String
  email: String
}

type UserWithToken {
  token: String
  user: User
}

input CreateUserInput {
  username: String!
  password: String!
  email: String!
}

input CreateSessionInput {
  username: String!
  password: String!
}

######################################

#### SERVERS & ROOMS #################

type Server {
  id: ID
  name: String
  rooms: [Room]
  users: [User]
  createdBy: User
  publicServer: Boolean
}

type Room {
  id: ID!
  name: String!
  maxLimit: Int
  type: RoomType
  messages: [Message]
  server: Server
  createdBy: User
}

enum RoomType {
  VOICE
  TEXT
}

type Message {
  id: ID
  author: User
  text: String
  imgPath: String
  type: MessageType
  dateCreated: String
  dateUpdated: String
}

type MessagePage {
  content: [Message!]!
  totalPages: Int!
  totalElements: Int!
  number: Int!
  size: Int!
}

enum MessageType {
  TEXT
  ATTACHMENT
}

input CreateServerInput {
  name: String!
  publicServer: Boolean!
}

input CreateRoomInput {
  name: String!
  type: RoomType!
  serverId: ID!
}

input CreateMessageInput {
  text: String!
  type: MessageType!
  roomId: ID!
}

####################################
