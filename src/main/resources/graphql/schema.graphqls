scalar Long

type Query {
  meQuery: User
  getAllUsers: [User]
  getUserById(id: ID!): User
  getAllServers(page: Int!, size: Int!, search: String): ServerPage!
  getAllUserServers: [Server]
  getRoomsByServerId(id: ID!): Rooms
  getMessagesByRoomId(
    id: ID!
    page: Int!
    size: Int!
    search: String
  ): MessagePage!
  getRoomById(id: ID!): Room
  getServerById(id: ID!): Server
  getBannedUsersByServerId(id: ID!): [BannedUser]
  getServerByInvite(token: String!): Server
}

type Mutation {
  createUser(user: CreateUserInput): User
  updateUser(user: UpdateUserInput): User
  updateUserPassword(credentials: UpdateUserPasswordInput): User
  deactivateUser(id: ID): User
  createSession(credentials: CreateSessionInput): UserWithToken
  createServer(server: CreateServerInput): Server
  updateServer(server: UpdateServerInput): Server
  createRoom(room: CreateRoomInput): Room
  createMessage(message: CreateMessageInput): Message
  joinServer(input: JoinServerInput): Server
  kickUserFromServer(input: KickUserInput): Boolean
  banUserFromServer(input: BanUserInput): Boolean
  unbanUserFromServer(input: UnbanUserInput): Boolean
  deleteServer(serverId: ID!): Boolean
  joinServerWithInvite(token: String): Server
  generateInviteLink(serverId: ID!): String
}

# USERS ##############################

type User {
  id: ID
  username: String
  email: String
  phoneNumber: Long
  avatar: String
  userPresence: UserPresenceType
}
type BannedUser {
  user: User!
  reason: String!
  dateCreated: String
  dateUpdated: String
  banAuthor: User!
}

type UserWithToken {
  token: String
  user: User
}

enum UserPresenceType {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

input CreateUserInput {
  username: String!
  password: String!
  email: String!
}

input CreateSessionInput {
  username: String!
  password: String!
}

input UpdateUserInput {
  username: String
  email: String
  phoneNumber: Long
  avatar: String
}

input UpdateUserPasswordInput {
  currentPassword: String!
  newPassword: String!
  confirmNewPassword: String!
}

######################################

#### SERVERS & ROOMS #################

type Server {
  id: ID
  name: String
  description: String
  rooms: [Room]
  joinedUsers: [User]
  createdBy: User
  publicServer: Boolean
  banner: String
  serverImg: String
}

type ServerPage {
  content: [Server!]!
  totalPages: Int!
  totalElements: Int!
  number: Int!
  size: Int!
}

input JoinServerInput {
  id: ID!
  invitationLink: String
}

input KickUserInput {
  serverId: ID!
  userId: ID!
}

input BanUserInput {
  serverId: ID!
  userId: ID!
  reason: String!
}

input UnbanUserInput {
  serverId: ID!
  userId: ID!
}

type Room {
  id: ID!
  name: String!
  maxLimit: Int
  type: RoomType
  messages: [Message]
  server: Server
  createdBy: User
}

enum RoomType {
  VOICE
  TEXT
}

type Rooms {
  text: [Room]
  voice: [Room]
}

type Message {
  id: ID
  author: User
  text: String
  imgPath: String
  type: MessageType
  dateCreated: String
  dateUpdated: String
}

type MessagePage {
  content: [Message!]!
  totalPages: Int!
  totalElements: Int!
  number: Int!
  size: Int!
}

enum MessageType {
  TEXT
  ATTACHMENT
}

input CreateServerInput {
  name: String!
  publicServer: Boolean!
}

input UpdateServerInput {
  id: String!
  name: String
  description: String
  banner: String
  serverImg: String
  publicServer: Boolean
}

input CreateRoomInput {
  name: String!
  type: RoomType!
  serverId: ID!
}

input CreateMessageInput {
  text: String!
  type: MessageType!
  roomId: ID!
}

####################################
